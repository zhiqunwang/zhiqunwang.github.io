[{"title":"Hello World","url":"/2020/05/13/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"},{"title":"Spring 注解驱动开发","url":"/2017/10/04/Spring 注解驱动开发/","content":"\n### 一、bean注册相关\n\n#### @Configuration\n\nJava Bean的配置来源标识，与XML配置异曲同工。\n\n#### @Bean \n\n具体bean配置，默认方法名称为Bean的name，可通过value指定多个BeanName\n\ninit-method、destroy-method指定初始化、销毁方法。\n\n#### @Scope\n\nbean在容器中的存在形式，默认singleton。（容器在初始化时进行预加载）\n\n可选类型：prototype（原型，每次请求获取的bean都是新创建的）、request、session\n\n#### @ComponentScan\n\n扫描注册类，定义bean扫描规则。\n\nvalue:指定扫描的包路径\n\nincludeFilters:指定扫描的时候按照什么规则包含哪些组件\n\nexcludeFilters:指定扫描的时候按照什么规则排除哪些组件\n\n其中includeFilters，excludeFilters可自定义过滤器，自定义过滤器需实现TypeFilter接口。\n\n#### @Lazy\n\n针对singleton而说，当加上该注解后，容器启动时不进行预加载，而是第一次应用索要bean时进行加载。\n\n#### @Conditional\n\n使用在类上或者方法上，定义bean的注册条件，条件规则器实现Condition接口。\n\n#### @Import\n\n快速给容器中导入组件,导入后在容器中组件的name 是导入组件的全类名。\n\n @Import(value={Color.class,MyImportSelector.class,MyImportBeanDefinitionRegistrar.class})\n\n三种类型的导入方法：\n\n- 导入具体组件的class类\n- 实现ImportSelector接口，导入该实现类，返回需要导入组件的全类名集合\n- 实现ImportBeanDefinitionRegistrar接口registerBeanDefinitions方法，在该方法内手动进行注册组件的BeanDefinition\n\n#### @ImportResource\n\n  导入beanDefinition定义的xml文件，即描述bean的xml文件\n\n#### 总结\n\n给容器中注册bean的方式：\n\n- @ComponentScan + @Controller、@Service、@Reporstory、@Componenet\n- @Bean 方式导入三方组件\n- @Import快速导入三方组件\n- @ImportResource 导入定义描述bean的xml文件\n\n### 二、bean生命周期相关\n\n#### 指定初始化和销毁方法\n\n@Bean指定init-method,destroy-method,单实例是在容器关闭时调用destroy方法，而多实例则不会管理这个bean销毁\n\n#### 实现spring bean生命周期相关接口\n\nbean 实现InitializingBean接口afterPropertiesSet 方法执行初始化，实现DisposableBean接口destroy方法进行销毁前的执行\n\n\n\n#### 使用JSR-250注解\n\n@PostConstruct、 @PreDestroy\n\n#### 实现BeanPostProcessor\n\n实现BeanPostProcessor，对所有bean创建后，init-method之前、之后对bean进行包装等操作。\n\n#### 实现xxxAware接口\n\nspring内部将进行值的回调设置。比如ApplicaitonContextAware,BeanNameAware,EmbeddedValueResolverAware\n\n\n\n### 三、bean依赖注入相关\n\n#### @Value\n\n- @Value(\"张三\")\n- @Value(\"#{20-2}\")\n- @Vaule(\"${}\") 读取配置文件中的值（在运行变量中的值）\n\n \n\n#### @PropertySource\n\n@PropertySource(\"classpath:/person.properties\") 将配置文件中的值导入环境变量\n\n#### @Autowired\n\n 默认按照组件的类型去匹配，类型匹配到多个然后按照name去匹配。默认必须可以找到匹配的值，可通过@Autowired(required = false)设置非必须注入，可标注在方法、属性、参数上\n\n#### @Qualifier\n\n指定匹配的模式按照bean的name匹配\n\n#### @Primary\n\nspring装配的时候默认使用首选的bean，当一个类型匹配多个实例后，优先级的选择。\n\n#### @Resource\n\nJSR-250提供，默认按照组件名称进行装配,@Resource(name=\"\")可指定name.但是没有按照类型同时按照优先级进行匹配\n\n#### @Inject\n\n#### @Profile\n\n@Profile(\"dev\")  自动装配环境搭建，默认default","tags":["spring"]}]